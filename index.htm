<html>
    <head>
        <script src="/convnet.js"></script>
        <script src="/bower_components/convnetjs/build/util.js"></script>
        <script src="/bower_components/convnetjs/build/vis.js"></script>
        <script src="/bower_components/convnetjs/build/deepqlearn.js"></script>
        <link href="/bower_components/2048/style/main.css" rel="stylesheet" type="text/css">
    </head>
    <body>
        <div class="container">
            <div class="heading">
                <h1 class="title">2048</h1>
                <div class="scores-container">
                    <div class="score-container">0</div>
                    <div class="best-container">0</div>
                </div>
            </div>

            <div class="above-game">
                <p class="game-intro">Join the numbers and get to the <strong>2048 tile!</strong></p>
                <a class="restart-button">New Game</a>
            </div>

            <div class="game-container">
                <div class="game-message">
                    <p></p>
                    <div class="lower">
                        <a class="keep-playing-button">Keep going</a>
                        <a class="retry-button">Try again</a>
                    </div>
                </div>

                <div class="grid-container">
                    <div class="grid-row">
                        <div class="grid-cell"></div>
                        <div class="grid-cell"></div>
                        <div class="grid-cell"></div>
                        <div class="grid-cell"></div>
                    </div>
                    <div class="grid-row">
                        <div class="grid-cell"></div>
                        <div class="grid-cell"></div>
                        <div class="grid-cell"></div>
                        <div class="grid-cell"></div>
                    </div>
                    <div class="grid-row">
                        <div class="grid-cell"></div>
                        <div class="grid-cell"></div>
                        <div class="grid-cell"></div>
                        <div class="grid-cell"></div>
                    </div>
                    <div class="grid-row">
                        <div class="grid-cell"></div>
                        <div class="grid-cell"></div>
                        <div class="grid-cell"></div>
                        <div class="grid-cell"></div>
                    </div>
                </div>

                <div class="tile-container">

                </div>
            </div>
            <script src="/bower_components/2048/js/bind_polyfill.js"></script>
            <script src="/bower_components/2048/js/classlist_polyfill.js"></script>
            <script src="/bower_components/2048/js/animframe_polyfill.js"></script>
            <script src="/bower_components/2048/js/html_actuator.js"></script>
            <script src="/bower_components/2048/js/grid.js"></script>
            <script src="/bower_components/2048/js/tile.js"></script>
            <script src="/bower_components/2048/js/local_storage_manager.js"></script>
            <script src="/bower_components/2048/js/game_manager.js"></script>
            <script src="/bower_components/2048/js/keyboard_input_manager.js"></script>
            <script>
var move
var lastScore = 0
var spec
var brain
var theMover
var theRestarter
var timer

LocalStorageManager.prototype.setGameState = function (gameState) {
  var i
  var j
  var theInput = []

  for (i = 0; i < 4; ++i) {
    for (j = 0; j < 4; ++j) {    
      if (gameState.grid.cells[i][j] !== null) {
        theInput.push(gameState.grid.cells[i][j].value)
      } else {
        theInput.push(0)
      }
    }
  }

  var numbers = document.querySelector(".show-number")
  numbers.innerHTML = "" + theInput
  var count = 0
  for (var k = 0; k < theInput.length; ++k){
    if (theInput[k] == 0) {
      count++
    }
  }
 
  if (move !== 4 && move !== undefined) {
    brain.backward(count * gameState.score) 
  }
  
  if (move === 4) {
    brain.backward(0)
  }
  move = brain.forward(theInput)
  if (count > 1) {
    theMover(move)
  } else {
    document.querySelector(".show-log").innerHTML += " " + gameState.score

    var logTail = document.querySelector(".show-log").innerHTML.split(" ").slice(-10)
    var log = document.querySelector(".show-log").innerHTML.split(" ")
    
    var sumT = logTail.reduce(function (previous, current) {return +(current) + (+previous)});
    var avgT = Math.floor(sumT / logTail.length)

    var sum = log.reduce(function (previous, current) {return +(current) + (+previous)});
    var avg = Math.floor(sum / log.length)

    console.log(avg, avgT)

    theRestarter()
  } 
  document.querySelector(".show-move").innerHTML = "" + move

  this.storage.setItem(this.gameStateKey, JSON.stringify(gameState));
};
KeyboardInputManager.prototype.listen = function () {
  var self = this;

  var map = {
    38: 0, // Up
    39: 1, // Right
    40: 2, // Down
    37: 3, // Left
  };

  // Respond to direction keys
  document.addEventListener("keydown", function (event) {
    var modifiers = event.altKey || event.ctrlKey || event.metaKey ||
                    event.shiftKey;
    var mapped    = map[event.which];

    if (!modifiers) {
      if (mapped !== undefined) {
        event.preventDefault();
        self.emit("move", mapped);
        if (move !== mapped){
          move = 4
        }
      }
    }

    // R key restarts the game
    if (!modifiers && event.which === 82) {
      self.restart.call(self, event);
    }
  });

  // Respond to button presses
  theMover = function(m){
    self.emit("move", m)
    if (timer) {
      clearTimeout(timer)
    }
    timer = setTimeout( function(){
      theMover((m+1) % 4)
    }, 10)
  }
  theRestarter = function(){
    self.emit("restart")
  }
  this.bindButtonPress(".move0", function(){
    self.emit("move", 0)
    if (move !== 0) {
      move = 4
    }
  })
  this.bindButtonPress(".move1", function(){
    self.emit("move", 1)
    if (move !== 1) {
      move = 4
    }
  })
  this.bindButtonPress(".move2", function(){
    self.emit("move", 2)
    if (move !== 2) {
      move = 4
    }
  })
  this.bindButtonPress(".move3", function(){
    self.emit("move", 3)
    if (move !== 3) {
      move = 4
    }
  })
  this.bindButtonPress(".restart-button", this.restart)
  this.bindButtonPress(".keep-playing-button", this.keepPlaying)

  // Respond to swipe events
  var touchStartClientX, touchStartClientY;
  var gameContainer = document.getElementsByClassName("game-container")[0];

  gameContainer.addEventListener(this.eventTouchstart, function (event) {
    if ((!window.navigator.msPointerEnabled && event.touches.length > 1) ||
        event.targetTouches.length > 1) {
      return; // Ignore if touching with more than 1 finger
    }

    if (window.navigator.msPointerEnabled) {
      touchStartClientX = event.pageX;
      touchStartClientY = event.pageY;
    } else {
      touchStartClientX = event.touches[0].clientX;
      touchStartClientY = event.touches[0].clientY;
    }

    event.preventDefault();
  });

  gameContainer.addEventListener(this.eventTouchmove, function (event) {
    event.preventDefault();
  });

  gameContainer.addEventListener(this.eventTouchend, function (event) {
    if ((!window.navigator.msPointerEnabled && event.touches.length > 0) ||
        event.targetTouches.length > 0) {
      return; // Ignore if still touching with one or more fingers
    }

    var touchEndClientX, touchEndClientY;

    if (window.navigator.msPointerEnabled) {
      touchEndClientX = event.pageX;
      touchEndClientY = event.pageY;
    } else {
      touchEndClientX = event.changedTouches[0].clientX;
      touchEndClientY = event.changedTouches[0].clientY;
    }

    var dx = touchEndClientX - touchStartClientX;
    var absDx = Math.abs(dx);

    var dy = touchEndClientY - touchStartClientY;
    var absDy = Math.abs(dy);

    if (Math.max(absDx, absDy) > 10) {
      // (right : left) : (down : up)
      self.emit("move", absDx > absDy ? (dx > 0 ? 1 : 3) : (dy > 0 ? 2 : 0));
    }
  });
};
              window.requestAnimationFrame(function () {
var num_inputs = 16
var num_actions = 4
var temporal_window = 1; // amount of temporal memory. 0 = agent lives in-the-moment :)
var network_size = num_inputs*temporal_window + num_actions*temporal_window + num_inputs;

// the value function network computes a value of taking any of the possible actions
// given an input state. Here we specify one explicitly the hard way
// but user could also equivalently instead use opt.hidden_layer_sizes = [20,20]
// to just insert simple relu hidden layers.
var layer_defs = [];
layer_defs.push({type:'input', out_sx:1, out_sy:1, out_depth:network_size});
layer_defs.push({type:'fc', num_neurons: 15, activation:'relu'});
layer_defs.push({type:'fc', num_neurons: 15, activation:'relu'});
layer_defs.push({type:'fc', num_neurons: 15, activation:'relu'});
layer_defs.push({type:'fc', num_neurons: 15, activation:'relu'});
layer_defs.push({type:'regression', num_neurons:num_actions});

// options for the Temporal Difference learner that trains the above net
// by backpropping the temporal difference learning rule.
var tdtrainer_options = {learning_rate:0.001, momentum:0.0, batch_size:64, l2_decay:0.01};

var opt = {}
opt.temporal_window = temporal_window
opt.experience_size = 300
opt.start_learn_threshold = 4
opt.gamma = 0.7
opt.learning_steps_total = 200
opt.learning_steps_burnin = 4
opt.epsilon_min = 0.05
opt.epsilon_test_time = 0.05
opt.layer_defs = layer_defs
opt.tdtrainer_options = tdtrainer_options

brain = new deepqlearn.Brain(num_inputs, num_actions, opt); // woohoo

            
                new GameManager(4, KeyboardInputManager, HTMLActuator, LocalStorageManager)
              });
            </script>
            <h1>a AI to play 2048</h1>
            <h2>Input</h2>
            <p>16 Numbers - <span class="show-number"></span></p>
            <h2>Output</h2>
            <p class="show-move"></p>
            <p>Moves 4 (<span class="move0">0</span>,<span class="move1">1</span>,<span class="move2">2</span>,<span class="move3">3</span>) </p>
            <h2>Training</h2>
            <p>Score > more</p>
            <p>end game = less</p>
            <p class="show-log"></p>
    </body>
</html>
